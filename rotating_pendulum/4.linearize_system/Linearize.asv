clear,clc
%% get non-linear model
load('../2.NonLinearSystem/NonLinFunc.mat','system_f')
load('../3.WhiteBoxEstimation/EstParameters/Beam Estimate.mat')
load('../3.WhiteBoxEstimation/EstParameters/Pendulum Estimate.mat')
% fill in with parameters:

%% linearize system
Params = [I_1,I_2,b_1,b_2,c_1,c_2,k_m,tau_e];
syms theta_1 theta_d_1 theta_2 theta_d_2 T u I_1 I_2 b_1 b_2 c_1 c_2 k_m tau_e

system_f = subs(system_f,[I_1,I_2,b_1,b_2,c_1,c_2,k_m,tau_e],Params);
states = [theta_1,theta_d_1,theta_2,theta_d_2,T];

A = jacobian(system_f,states);
B = jacobian(system_f,u);
C = [1 0 0 0 0;
     0 0 1 0 0];
D = [0;0];
%% save system

save("Jacobian.mat",'A','B','C','D','theta_1','theta_d_1','theta_2','theta_d_2','T','u');

%% compare the lineaization result
% test input!
RunTime = 10;
time_step = 0.001;
t = 0 : 0.001 : 10;
f = 1;
u = 0.1*sin(2*pi*f*t); 
simulink_input = timeseries(u,t); 

% initial state
theta_1_0 = pi;
theta_2_0 = 0;
op = [theta_1_0; 0; theta_2_0; 0; 0];

% get the double datatype
A = subs(A, [theta_1 theta_d_1 theta_2 theta_d_2 T], op');
B = subs(B, [theta_1 theta_d_1 theta_2 theta_d_2 T], op');
A = double(A);
B = double(B);
C = double(C);
D = double(D);

% check the rank, both rand are 5, it's controllable and observable
rank(ctrb(A, B))
rank(obsv(A, C))

% simulate 
sinulink_output = sim('step4_1_compare_lin_non_lin1.mdl');

% plot the result
t_in = sinulink_output.tout;

theta_1_nonlin = sinulink_output.nonlin.Data(:, 1);
theta_2_nonlin = sinulink_output.nonlin.Data(:, 2);
theta_1_lin = sinulink_output.nonlin.Data(:, 1);
theta_2_lin = sinulink_output.nonlin.Data(:, 2);

